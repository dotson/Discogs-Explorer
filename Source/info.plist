<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.dotson.discogsexplorer</string>
	<key>connections</key>
	<dict>
		<key>32CB79C6-10C2-4DA1-A2F6-10933C6472D2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F6180AAF-DB94-45EB-8E4B-FB7A358ECE8C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A3C97EFB-4B31-4067-B136-0B88D5AC8D01</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>ADE556C9-673E-4627-A634-791143842F54</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C841A561-F609-40BA-BF78-E3E4433280DF</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A3C97EFB-4B31-4067-B136-0B88D5AC8D01</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F6180AAF-DB94-45EB-8E4B-FB7A358ECE8C</key>
		<array/>
	</dict>
	<key>createdby</key>
	<string>C. Dotson</string>
	<key>description</key>
	<string>View Artist and Release Info in Alfred's Window</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Discogs Explorer</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>dex</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist='https://raw.githubusercontent.com/dotson/Discogs-Explorer/master/Source/info.plist'
readonly workflow_url='https://github.com/dotson/Discogs-Explorer/raw/master/Discogs%20Explorer.alfredworkflow'
readonly download_type='github_release'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  readonly local notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  readonly local terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>ADE556C9-673E-4627-A634-791143842F54</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>2</integer>
				<key>hotmod</key>
				<integer>1179648</integer>
				<key>hotstring</key>
				<string>D</string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>C841A561-F609-40BA-BF78-E3E4433280DF</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>type</key>
			<string>alfred.workflow.utility.junction</string>
			<key>uid</key>
			<string>A3C97EFB-4B31-4067-B136-0B88D5AC8D01</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>4</integer>
				<key>keyword</key>
				<string>dex</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for {query}</string>
				<key>script</key>
				<string>set workflowFolder to do shell script "pwd"set wlib to load script POSIX file (workflowFolder &amp; "/q_workflow.scpt")set wf to wlib's new_workflow()set query to "{query}"set discogsAPI to "http://api.discogs.com"set databaseURL to "https://api.discogs.com/database/search?"set consumerKey to "GxldrZYtMqKJNAzIYFDg"set consumerSignature to "uyZaWsVSRhKBqOynXBuqnbpiVIhEqrqK"set oauthString to "&amp;key=" &amp; consumerKey &amp; "&amp;secret=" &amp; consumerSignature-- INITIALIZE THE ICONS --set artistIcon to "Icons/artist.png"set labelIcon to "Icons/label.png"set masterIcon to "Icons/master.png"set releaseIcon to "Icons/release.png"set multiArtistIcon to "Icons/multiArtist.png"set bulletIcon to "Icons/bullet.png"set exploreIcon to "Icons/explore.png"set trackIcon to "Icons/tracklist.png"set shortType to {"a", "l", "m", "r"}set longType to {"artist", "label", "master", "release"}set iconType to {artistIcon, labelIcon, masterIcon, releaseIcon}-- SWITCH BETWEEN TYPE STRING AND TYPE ICONon textSwitch(inputText, listOne, listTwo)	repeat with i from 1 to count of listOne		if inputText is item i of listOne then			set outputText to item i of listTwo		end if	end repeat	return outputTextend textSwitch-- PARSE ID AND TYPE FROM QUERYon splitQuery(inputText)	set output1 to text 1 of inputText	set output2 to text 2 thru (end of inputText) of inputText	return {output1, output2}end splitQuery-- DETERMINE WHERE IN DRILL DOWN WE AREtell application "System Events"	set queryList to wlib's q_split(query, " ⇾ ")	set stepCount to count of queryListend tell-- STEP ONE - SEARCH DISCOGSif stepCount is less than 2 then		if length of query is 0 then		-- get currently playing artist in iTunes		set nowPlayingQuery to ""		if application "iTunes" is running then			tell application "iTunes"				if player state is playing then					set thisSong to current track					set nowPlayingArtist to (get artist of thisSong)					set nowPlayingTrack to (get name of thisSong)					set nowPlayingRelease to (get album of thisSong)					set nowPlayingQuery to nowPlayingArtist &amp; " - " &amp; nowPlayingTrack &amp; " (" &amp; nowPlayingRelease &amp; ")"										set query to nowPlayingQuery					add_result of wf without isValid given theUid:"searching", theArg:"", theTitle:"Current iTunes Track:", theAutocomplete:"", theSubtitle:nowPlayingQuery, theIcon:"", theType:""										set queryString to wf's q_encode_url(nowPlayingArtist as string)					set queryString to "&amp;type=artist&amp;q=" &amp; queryString					set discogsSearch to databaseURL &amp; oauthString &amp; queryString					set resultCount to 0					try						set json to wf's request_json(discogsSearch)						set results to item 1 of results of json						set resultCount to |items| of pagination of json					end try										if resultCount is not 0 then						set queryID to |id| of results						set queryTitle to title of results						add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryTitle, theAutocomplete:"a" &amp; queryID &amp; " ⇾ ", theSubtitle:"artist", theIcon:artistIcon, theType:""					end if									end if			end tell		end if			end if		if length of query is less than 3 then		add_result of wf without isValid given theUid:"searching", theArg:"", theTitle:"Discogs Explorer", theAutocomplete:"", theSubtitle:"Searching for ... " &amp; query, theIcon:"", theType:""	else				tell application "System Events"			set queryString to wf's q_encode_url(query as string)			set queryString to "&amp;q=" &amp; queryString			set discogsSearch to databaseURL &amp; oauthString &amp; queryString			set resultCount to 0			try				set json to wf's request_json(discogsSearch)				set results to results of json				set resultCount to |items| of pagination of json			end try						if resultCount is 0 then				add_result of wf without isValid given theUid:"error", theArg:"", theTitle:"No results found for: " &amp; query, theAutocomplete:"", theSubtitle:"Check your spelling, or maybe you need less obscure taste in music.", theIcon:"", theType:""			else				set displayCount to 10				if resultCount is less than 10 then					set displayCount to resultCount				end if								repeat with i from 1 to displayCount					set thisResult to item i of results										set queryID to |id| of thisResult					set queryTitle to |title| of thisResult					try						if query is nowPlayingQuery then							set queryTitle to item 2 of wlib's q_split(queryTitle, " - ")						end if					end try										set queryType to |type| of thisResult					set queryTypeShort to text 1 of queryType					set queryIcon to my textSwitch(queryType, longType, iconType)										try						set queryFormatList to |format| of thisResult						set queryFormat to wlib's q_join(queryFormatList, ", ")						set queryFormat to " - " &amp; queryFormat					on error						set queryFormat to ""					end try					if queryType is "master" then						set queryFormat to ""					end if					try						set queryYear to " - " &amp; |year| of thisResult					on error						set queryYear to ""					end try										if queryType is not "label" then						add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryTitle, theAutocomplete:queryTypeShort &amp; queryID &amp; " ⇾ ", theSubtitle:queryType &amp; queryFormat &amp; queryYear, theIcon:queryIcon, theType:""					end if									end repeat							end if					end tell	end ifend if-- STEP TWO - DISPLAY SELECTED RESULTif stepCount is 2 then	tell application "System Events"				set queryFull to item 1 of queryList		set queryTypeShort to item 1 of my splitQuery(queryFull)		set queryType to my textSwitch(queryTypeShort, shortType, longType)		set queryID to item 2 of my splitQuery(queryFull)				set discogsSearch to discogsAPI &amp; "/" &amp; queryType &amp; "s/" &amp; queryID		delay 0.5		set json to wf's request_json(discogsSearch)				-- STEP TWO A - DISPLAY SELECTED ARTIST		if queryType is "artist" then			set queryIcon to artistIcon			set queryTitle to |name| of json			set queryURL to uri of json as string						add_result of wf with isValid given theUid:"", theArg:queryURL, theTitle:queryTitle, theAutocomplete:"", theSubtitle:"Go to Discogs.com", theIcon:queryIcon, theType:""						try				set queryRealName to realname of json				if queryRealName does not contain "," then					add_result of wf with isValid given theUid:"", theArg:queryRealName, theTitle:"Real Name: ", theAutocomplete:"", theSubtitle:queryRealName, theIcon:artistIcon, theType:""				end if			end try						try				set queryProfile to profile of json				add_result of wf with isValid given theUid:"", theArg:queryProfile, theTitle:"Profile:", theAutocomplete:"", theSubtitle:queryProfile, theIcon:artistIcon, theType:""			end try						try				set queryNameVariationList to namevariations of json				set queryNameVariations to wlib's q_join(queryNameVariationList, ", ")				add_result of wf with isValid given theUid:"", theArg:queryNameVariations, theTitle:"Name Variations:", theAutocomplete:"", theSubtitle:queryNameVariations, theIcon:multiArtistIcon, theType:""			end try						try				set queryAliasList to {}				set aliasCount to count of |aliases| of json				repeat with i from 1 to aliasCount					set thisAlias to item i of |aliases| of json					set thisName to |name| of thisAlias					set end of queryAliasList to thisName				end repeat				set queryAliases to wlib's q_join(queryAliasList, ", ")				add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Explore Aliases...", theAutocomplete:query &amp; "Aliases" &amp; " ⇾ ", theSubtitle:queryAliases, theIcon:exploreIcon, theType:""			end try						try				set queryGroupList to {}				set groupCount to count of |groups| of json				repeat with i from 1 to groupCount					set thisGroup to item i of |groups| of json					set thisName to |name| of thisGroup					set end of queryGroupList to thisName				end repeat				set queryGroups to wlib's q_join(queryGroupList, ", ")				add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Explore 'In Groups' ...", theAutocomplete:query &amp; "Groups" &amp; " ⇾ ", theSubtitle:queryGroups, theIcon:exploreIcon, theType:""			end try						try				set queryMemberList to {}				set memberCount to count of members of json				repeat with i from 1 to memberCount					set thisMember to item i of members of json					set thisName to |name| of thisMember					set end of queryMemberList to thisName				end repeat				set queryMembers to wlib's q_join(queryMemberList, ", ")				add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Explore Band Members...", theAutocomplete:query &amp; "Members" &amp; " ⇾ ", theSubtitle:queryMembers, theIcon:exploreIcon, theType:""			end try						add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Explore Releases...", theAutocomplete:query &amp; "Releases" &amp; " ⇾ ", theSubtitle:"", theIcon:exploreIcon, theType:""					end if						-- STEP TWO B - DISPLAY SELECTED RELEASE		if queryType is not "artist" then			if queryType is not "label" then				set queryIcon to releaseIcon				set queryTitle to |title| of json				set queryArtist to |name| of item 1 of artists of json				set queryURL to uri of json as string								try					set queryReleased to released_formatted of json				on error					set queryReleased to |year| of json				end try								try					set queryGenreList to genres of json					set queryGenres to wlib's q_join(queryGenreList, ", ")				on error					set queryGenres to ""				end try								try					set queryStylesList to styles of json					set queryStyles to wlib's q_join(queryStylesList, ", ")					set queryStylesFormatted to " [" &amp; queryStyles &amp; "]"				on error					set queryStylesFormatted to ""				end try								add_result of wf with isValid given theUid:"", theArg:queryURL, theTitle:queryArtist &amp; " - " &amp; queryTitle, theAutocomplete:"", theSubtitle:"Go to Discogs.com", theIcon:queryIcon, theType:""								try					set queryLabelsList to {}					set labelCount to count of labels of json					repeat with i from 1 to labelCount						set thisLabel to item i of labels of json						set thisName to |name| of thisLabel						set end of queryLabelsList to thisName					end repeat					set queryLabels to wlib's q_join(queryLabelsList, ", ")										add_result of wf with isValid given theUid:"", theArg:queryLabels, theTitle:"Label(s):", theAutocomplete:"", theSubtitle:queryLabels, theIcon:queryIcon, theType:""				end try								try					set queryFormatList to {}					set formatCount to count of formats of json					repeat with i from 1 to formatCount						set thisFormat to item i of formats of json						set thisName to |name| of thisFormat						set end of queryFormatList to thisName					end repeat					set queryFormats to wlib's q_join(queryFormatList, ", ")										add_result of wf with isValid given theUid:"", theArg:queryFormats, theTitle:"Format(s):", theAutocomplete:"", theSubtitle:queryFormats, theIcon:queryIcon, theType:""				end try								add_result of wf with isValid given theUid:"", theArg:queryReleased, theTitle:"Released:", theAutocomplete:"", theSubtitle:queryReleased, theIcon:queryIcon, theType:""								add_result of wf with isValid given theUid:"", theArg:queryStyles, theTitle:"Genre:", theAutocomplete:"", theSubtitle:queryGenres &amp; queryStylesFormatted, theIcon:queryIcon, theType:""								try					set queryNotes to notes of json					add_result of wf with isValid given theUid:"", theArg:queryNotes, theTitle:"Notes:", theAutocomplete:"", theSubtitle:queryNotes, theIcon:queryIcon, theType:""				end try								try					set credits to extraartists of json					if (count of credits) is greater than 0 then						add_result of wf without isValid given theUid:"", theArg:"", theTitle:"Explore Credits...", theAutocomplete:query &amp; "Credits" &amp; " ⇾ ", theSubtitle:"", theIcon:exploreIcon, theType:""					end if				end try								try					add_result of wf without isValid given theUid:"", theArg:"", theTitle:"View Tracklist...", theAutocomplete:query &amp; "Tracks" &amp; " ⇾ ", theSubtitle:"", theIcon:exploreIcon, theType:""				end try							end if		end if			end tellend if-- STEP THREE - DRILL DOWNif stepCount is 3 then	tell application "System Events"				set queryFull to item 1 of queryList		set queryTypeShort to item 1 of my splitQuery(queryFull)		set queryType to my textSwitch(queryTypeShort, shortType, longType)		set queryID to item 2 of my splitQuery(queryFull)		set queryStep to item 2 of queryList		set queryStepSearch to item 3 of queryList		set discogsSearch to discogsAPI &amp; "/" &amp; queryType &amp; "s/" &amp; queryID		delay 0.5		set json to wf's request_json(discogsSearch)				if queryType is "artist" then			if queryStep is "Aliases" then				set queryIcon to artistIcon				set queryTitle to |name| of json								add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryTitle, theAutocomplete:"", theSubtitle:"Aliases:", theIcon:queryIcon, theType:""								repeat with i from 1 to count of |aliases| of json					set thisAlias to |name| of item i of |aliases| of json					set thisID to |id| of item i of |aliases| of json					set thisSearch to "a" &amp; thisID										add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisAlias, theAutocomplete:thisSearch &amp; " ⇾ ", theSubtitle:"Explore...", theIcon:exploreIcon, theType:""				end repeat			end if						if queryStep is "Groups" then				set queryIcon to multiArtistIcon				set queryTitle to |name| of json				add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryTitle, theAutocomplete:"", theSubtitle:"In Other Groups:", theIcon:queryIcon, theType:""				repeat with i from 1 to count of |groups| of json					set thisGroup to |name| of item i of |groups| of json					set thisID to |id| of item i of |groups| of json					set thisActive to |active| of item i of |groups| of json					if thisActive then						set thisActive to ""					else						set thisActive to " [inactive]"					end if					set thisSearch to "a" &amp; thisID					add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisGroup &amp; thisActive, theAutocomplete:thisSearch &amp; " ⇾ ", theSubtitle:"Explore...", theIcon:exploreIcon, theType:""				end repeat			end if						if queryStep is "Members" then				set queryIcon to multiArtistIcon				set queryTitle to |name| of json				add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryTitle, theAutocomplete:"", theSubtitle:"Band Members:", theIcon:queryIcon, theType:""								repeat with i from 1 to count of members of json					set thisMember to |name| of item i of members of json					set thisID to |id| of item i of members of json					set thisActive to |active| of item i of members of json					if thisActive then						set thisActive to ""					else						set thisActive to " [inactive]"					end if					set thisSearch to "a" &amp; thisID					add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisMember &amp; thisActive, theAutocomplete:thisSearch &amp; " ⇾ ", theSubtitle:"Explore...", theIcon:exploreIcon, theType:""				end repeat			end if						if queryStep is "Releases" then				set queryIcon to artistIcon				set queryTitle to |name| of json								set discogsSearch to discogsAPI &amp; "/" &amp; queryType &amp; "s/" &amp; queryID &amp; "/releases"				delay 0.5				set json to wf's request_json(discogsSearch)				set releases to releases of json				set releaseCount to count of releases				if queryStepSearch is not "" then					set releaseText to ""				else					set releaseText to " (" &amp; releaseCount &amp; " total)"				end if								add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryTitle, theAutocomplete:"", theSubtitle:"Releases:" &amp; releaseText, theIcon:queryIcon, theType:""								repeat with i from 1 to count of releases					set thisRelease to item i of releases					set thisTitle to |title| of thisRelease					set thisID to |id| of thisRelease					set thisType to |type| of thisRelease					set thisTypeShort to text 1 of thisType					set thisIcon to my textSwitch(thisType, longType, iconType)					set thisSearch to thisTypeShort &amp; thisID					try						set thisFormat to " - " &amp; |format| of thisRelease					on error						set thisFormat to ""					end try					if thisType is "master" then						set thisFormat to ""					end if					try						set thisYear to " - " &amp; |year| of thisRelease					on error						set thisYear to ""					end try										if queryStepSearch is "" then						add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisTitle, theAutocomplete:thisSearch &amp; " ⇾ ", theSubtitle:thisType &amp; thisFormat &amp; thisYear, theIcon:thisIcon, theType:""					else						if thisTitle contains queryStepSearch then							add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisTitle, theAutocomplete:thisSearch &amp; " ⇾ ", theSubtitle:thisType &amp; thisFormat &amp; thisYear, theIcon:thisIcon, theType:""						end if					end if									end repeat							end if					end if				if queryType is not "artist" then			if queryType is not "label" then				if queryStep is "Tracks" then					set queryIcon to trackIcon					set queryTitle to |title| of json					set queryArtist to |name| of item 1 of artists of json					set queryURL to uri of json										add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryArtist &amp; " - " &amp; queryTitle, theAutocomplete:"", theSubtitle:"Tracklist", theIcon:queryIcon, theType:""										set trackCount to count of tracklist of json					repeat with i from 1 to trackCount						set thisTrack to |title| of item i of tracklist of json						try							set thisDuration to |duration| of item i of tracklist of json						on error							set thisDuration to ""						end try						try							set thisPosition to |position| of item i of tracklist of json &amp; ".  "						on error							set thisPosition to i &amp; ".  "						end try						add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisPosition &amp; thisTrack, theAutocomplete:"", theSubtitle:"       " &amp; thisDuration, theIcon:bulletIcon, theType:""					end repeat									end if								if queryStep is "Credits" then					set queryIcon to multiArtistIcon					set queryTitle to |title| of json					set queryArtist to |name| of item 1 of artists of json					set credits to extraartists of json										add_result of wf without isValid given theUid:"", theArg:"", theTitle:queryArtist &amp; " - " &amp; queryTitle, theAutocomplete:"", theSubtitle:"Credits:", theIcon:queryIcon, theType:""					repeat with i from 1 to count of credits						set thisCredit to item i of credits						set thisName to |name| of thisCredit						set thisRole to |role| of thisCredit						set thisID to |id| of thisCredit						set thisSearch to "a" &amp; thisID						add_result of wf without isValid given theUid:"", theArg:"", theTitle:thisName, theAutocomplete:thisSearch &amp; " ⇾ ", theSubtitle:thisRole, theIcon:exploreIcon, theType:""					end repeat									end if							end if		end if			end tellend if-- return XML datawf's to_xml("")</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Search for Artist or Release Info from Discogs.com</string>
				<key>title</key>
				<string>Discogs Explorer</string>
				<key>type</key>
				<integer>6</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>4</integer>
				<key>script</key>
				<string>set query to "{query}"try	if (characters 1 through 5 of query as string) is "http:" then		open location query	end if	if (characters 1 through 6 of query as string) is "https:" then		open location query	end ifend tryset the clipboard to query</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>F6180AAF-DB94-45EB-8E4B-FB7A358ECE8C</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>triggerid</key>
				<string>dex_ext</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>32CB79C6-10C2-4DA1-A2F6-10933C6472D2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Discogs.com Explorer
=============

*An Alfred workflow for exploring the Discogs.com database, with family-friendly drill-down menus.*

Search Discogs.com's database for an artist or album release. Drill-down menus provide ability to browse the database.

Features:
- A drill-down style workflow to allow exploring the Discogs.com release database. The workflow is triggered by the keyword "dex" or via hotkey.
- Upon actioning, the workflow defaults to checking if iTunes is currently playing and will look up info for the current track at Discogs.
- Typing in the Alfred window triggers searching for the entered query.
- Anything found in the Discogs API search begins populating in the Alfred window.
- Depending on the results rows will provide static text, a direct link to the relevant Discogs url, or further drill-down ("Explore") options.

Notes: 
- All Discogs OAuth updates from the last version have been removed since they re-simplified the process!

Limitations and Such:
- Because of the way Discogs categorizes 'releases' there is a little inconsistency across all of the data. I've tried to smooth this out as best I can.
- Essentially, this workflow provides the same search ability as the main Discogs site. This means we still have to deal with how they handle artists with similar names (i.e., adding (2), (3), etc. to them). There's nothing I can do about that, and yeah I think it's annoying too.
- I purposely left out the loading of Discogs images because it dramatically slowed down the workflow to the point of not being useable.</string>
	<key>uidata</key>
	<dict>
		<key>32CB79C6-10C2-4DA1-A2F6-10933C6472D2</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>Allows this workflow to be triggered by other workflows.</string>
			<key>xpos</key>
			<integer>35</integer>
			<key>ypos</key>
			<integer>165</integer>
		</dict>
		<key>7DD3BDE5-A157-42E5-9376-F681FB50A4EE</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>315</integer>
			<key>ypos</key>
			<integer>165</integer>
		</dict>
		<key>A3C97EFB-4B31-4067-B136-0B88D5AC8D01</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>195</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>ADE556C9-673E-4627-A634-791143842F54</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>315</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>C841A561-F609-40BA-BF78-E3E4433280DF</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>35</integer>
			<key>ypos</key>
			<integer>30</integer>
		</dict>
		<key>F6180AAF-DB94-45EB-8E4B-FB7A358ECE8C</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>xpos</key>
			<integer>490</integer>
			<key>ypos</key>
			<integer>165</integer>
		</dict>
	</dict>
	<key>version</key>
	<string>1.3.1</string>
	<key>webaddress</key>
	<string>https://github.com/dotson/Discogs-Explorer</string>
</dict>
</plist>
